{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/marikaharri/test/blob/main/COP1000_Graded_Notebook_2.ipynb%20HW\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Graded Notebook 2\n",
        "* **Possible 115 points out of 100.**\n",
        "\n",
        "* Your name here: \n",
        "* The shared link to this notebook here: "
      ],
      "metadata": {
        "id": "R6OmsErsrc7M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Task 1** (25 points possible)\n",
        "*  Write a while loop that uses a sentinel value to control a loop in a Python program. You also write the statements that make up the body of the loop.\n",
        "* The source code in the code cell below contains the necessary assignment and output statements. Each theater patron enters a value from 0 to 4 indicating the number of stars that the patron awards to the Guideâ€™s featured movie of the week. The program executes continuously until the theater manager enters a negative number to quit. At the end of the program, you should display the average star rating for the movie.\n",
        "\n",
        "    * Comments and code organization are expected to adhere to the requirements discussed in the course. **5 pts**\n",
        "    *  While loop funtions as expected **10 pts**\n",
        "    *  Output meets expectations (average is calculated correctly)  **10 pts**\n"
      ],
      "metadata": {
        "id": "dkOfTZt3rdMv"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "598HVzoiec3x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "152e197e-5955-443e-c691-91c6e7fa36b6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter rating for featured movie: 4\n",
            "Enter rating for featured movies: 3\n",
            "Enter rating for featured movies: 2\n",
            "Enter rating for featured movies: 1\n",
            "Enter rating for featured movies: 0\n",
            "Enter rating for featured movies: 1\n",
            "Enter rating for featured movies: 2\n",
            "Enter rating for featured movies: 3\n",
            "Enter rating for featured movies: 4\n"
          ]
        }
      ],
      "source": [
        "\"\"\"This program allows each theater patron to enter a value from\n",
        "0 to 4 indicating the number of stars that the patron awards\n",
        "to the Guide's featured movie of the week. The program\n",
        "executes continuously until the theater manager enters a\n",
        "negative number to quit. At the end of the program, the\n",
        "average star rating for the movie is displayed.\n",
        "\"\"\"\n",
        "\n",
        "# Initialize variables.\n",
        "totalStars = 0  # total of star ratings.\n",
        "numPatrons = 0  # keep track of number of patrons\n",
        "\n",
        "\n",
        "# Get input.\n",
        "numStarsString = input(\"Enter rating for featured movie: \")\n",
        "\n",
        "# Convert to double.\n",
        "numStars = float(numStarsString)\n",
        "\n",
        "# Write while loop here\n",
        "while numStars >= 0 and numStars <= 4:\n",
        "  numPatrons = numPatrons + 1\n",
        "  totalStars = totalStars + numStars\n",
        " #Get input\n",
        "  numStarsString = input(\"Enter rating for featured movies: \")\n",
        "\n",
        "  #Converr to double.\n",
        "  numStars = float(numStarsString)\n",
        "\n",
        "# Calculate average star rating\n",
        "averageStars - totalStars / numPatrons\n",
        "print(\"Average Star Value: \" + str(averageStars))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Task 2** (30 points possible)\n",
        "*  You will add nested loops to the Python program provided. The program should print the outline of the letter E.***(example provided below)*** The letter E is printed using asterisks, three across and five down. This program uses the print(\"*\", end=' ') to print an asterisk and print(\" \", end=' ') to print a space.\n",
        "* Using the code block and starter code below, Write the nested loops to control the number of rows and the number of columns that make up the letter E, as shown below:\n",
        "\n",
        "${***}$\n",
        "\n",
        "${*}$\n",
        "\n",
        "${***}$\n",
        "\n",
        "${*}$\n",
        "\n",
        "${***}$\n",
        "\n",
        "  * Program uses an if / elif / else **10 pts**\n",
        "  * Nested for or while loops meet expectations **10 pts**\n",
        "  * Output meets expectations **10 pts**\n",
        "\n"
      ],
      "metadata": {
        "id": "f2UkESAPru7Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "NUM_ACROSS = 3 # Number of asterisks to print across\n",
        "NUM_DOWN = 5 # Number of asterisks to print down\n",
        "\n",
        "# Write a loop to control the number of rows.\n",
        "\n",
        "\n",
        "    # Write a loop to control the number of \n",
        "\n",
        "    \n",
        "        # Decide when to print an asterisk in every column.(hint: conditionals used)\n",
        "\n",
        "\n",
        "print(\"*\", end='')\n",
        "        # Decide when to print asterisk in column 1.   \n",
        "print(\"*\", end='')\n",
        "        # Decide when to print a space instead of an asterisk.   \n",
        "print(\" \", end='')\n",
        "        # Figure out where to place this statement that prints a newline.\n",
        "print(\"\\n\")"
      ],
      "metadata": {
        "id": "oBmqAkNTrwcb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Task 3** (30 points possible)\n",
        "*  Lets start by declaring and initializing a list of the following values : 10,20,30,40,50 **5 pts**\n",
        "\n",
        "* include the value **\"Module\"** in the list between 30 and 40 and display the contents vertically. **10 pts** ***(example below)***\n",
        "* Sort the list and display in the sorted order of your choice **5 pts**\n",
        "* Use a built in function to remove \"Module\" based on its index and display the list in an order other than the order previously used. **10 pts**\n",
        "\n",
        "10\n",
        "\n",
        "20\n",
        "\n",
        "30\n",
        "\n",
        "Module\n",
        "\n",
        "40\n",
        "\n",
        "50"
      ],
      "metadata": {
        "id": "ErpMPcgDrwnb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**I broke this down into individual cells for the specific graded steps** (*run each one so the system has the data etc for the next cell to use*)"
      ],
      "metadata": {
        "id": "1Iaw1rm9MtlC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#3a Create the list that will be used \n",
        "thislist = [10, 20, 30, 40, 50]\n",
        "print(thislist)"
      ],
      "metadata": {
        "id": "XhEOQaFsr9Rh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#3b Include the word \"Module\" in the location specified and print the contents of a list vertically (hint: use loop)\n",
        "thislist = [10, 20, 30, 40, 50]\n",
        "thislist.insert(3,\"module\")\n",
        "for x in thislist:\n",
        "    print(x)"
      ],
      "metadata": {
        "id": "3imUjwkUyTCK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1cd32ca8-fe84-4851-ac4c-7c667917d7a4"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "20\n",
            "30\n",
            "module\n",
            "40\n",
            "50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3c Sort the list and display in the sorted order of your choice\n",
        "thislist.reverse()\n",
        "print(thislist)\n",
        "\n",
        "[50, 40, 'module', 30, 20, 10]"
      ],
      "metadata": {
        "id": "0ZN0VAvQzfiJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b6e1d658-8ab1-42e6-e3c3-43ba1d6603ea"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[50, 40, 'module', 30, 20, 10]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[50, 40, 'module', 30, 20, 10]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3d Use a built in function to remove \"Module\" based on its index and display the list in an order other than the order previously used......\n",
        "thislist = [10, 20, 30, 40, 50]\n",
        "thislist.insert(3,\"module\")\n",
        "print(thislist)\n",
        "\n",
        "thislist.pop(3)\n",
        "thislist.sort()\n",
        "print(thislist)"
      ],
      "metadata": {
        "id": "IZ538hQU0YJR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e83528a9-6245-4c1f-d5d5-b805715eeda6"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10, 20, 30, 'module', 40, 50]\n",
            "[10, 20, 30, 40, 50]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Task 3** (15 points possible)\n",
        "*  I will provide the Main function and you will define the performOperation function.\n",
        "* The program is a simple calculator that prompts the user for two numbers and an operator ( +, -, *, or / ).\n",
        "* The two numbers and the operator are passed to the function where the appropriate arithmetic operation is performed. The result is then returned to where the arithmetic operation and result are displayed.\n",
        "\n",
        "* Once the performOperation function is created correctly the Code cell below it will run and display the following:\n",
        "\n",
        "**example:**\n",
        "\n",
        "Enter the first number: 2\n",
        "\n",
        "Enter the second number: 2\n",
        "\n",
        "Enter an operator (+ - * /): /\n",
        "\n",
        "2 / 2 = 1.0\n",
        "\n",
        "* division calculation **2 pts**\n",
        "* addition calculation **2 pts**\n",
        "* subtraction calculation **2 pts**\n",
        "* Multiplication calculation **2 pts**\n",
        "* parameters and return **2 pts**"
      ],
      "metadata": {
        "id": "NHm30wv21MlC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# your code to create the performOperation() function \n",
        "# Hints: pass three arguments to the function, return a value.\n",
        "\n",
        "# Write performOperation function here\n",
        "def performOperation():\n",
        "  # your code here\n",
        "\n",
        "\n",
        "  "
      ],
      "metadata": {
        "id": "Px2Y6NAT1wVn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == '__main__':\n",
        "  numberOne = int(input(\"Enter the first number: \"))\n",
        "  numberTwo = int(input(\"Enter the second number: \"))\n",
        "  operation = input(\"Enter an operator (+ - * /): \")\n",
        "\n",
        "  # Call performOperation method here and store the value in \"result\"\n",
        "  result = performOperation(numberOne, numberTwo, operation)\n",
        "  print(str(numberOne) + \" \" + operation + \" \" + str(numberTwo) + \" = \" + str(result))"
      ],
      "metadata": {
        "id": "HMkd33VA1z_4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Bonus points**\n",
        "create the performOperation() function again with default parameter values so the revised main below will execute without error\n",
        "\n",
        "defaults can be whatever values you choose but all 3 are expected. **5 pts**"
      ],
      "metadata": {
        "id": "I6uEm3vp7BO0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Write revised performOperation function here\n",
        "def performOperation():\n",
        "  # your code here\n",
        "\n",
        "  "
      ],
      "metadata": {
        "id": "HAcWmg7k6_0I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == '__main__':\n",
        "  numberOne = int(input(\"Enter the first number: \"))\n",
        "  #numberTwo = int(input(\"Enter the second number: \"))\n",
        "  #operation = input(\"Enter an operator (+ - * /): \")\n",
        "\n",
        "  # Call performOperation method here and store the value in \"result\"\n",
        "  result = performOperation(numberOne, numberTwo , operation)\n",
        "  print(str(numberOne) + \" \" + operation + \" \" + str(numberTwo) + \" = \" + str(result))"
      ],
      "metadata": {
        "id": "oJPtSIbT68Y6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "outputId": "b0f59888-70c9-45d4-ec56-66790c938ae8"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter the first number: 5\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-01ea8318207e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0;31m# Call performOperation method here and store the value in \"result\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m   \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mperformOperation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumberOne\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumberTwo\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0moperation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumberOne\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\" \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0moperation\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\" \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumberTwo\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\" = \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'performOperation' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Task 4** (15 points possible)\n",
        "* Create a tuple containing the following and display its contents: \"first\", \"middle\", \"last\" ** 2.5 pts**\n",
        "* Create a List containing the following and display its contents: \"Wile\", \"E\", \"Coyote\" ** 2.5 pts**\n",
        "* Create a dictionary that uses the tuple above as keys and the List above as related values and display its contents. **Bonus points 10**"
      ],
      "metadata": {
        "id": "y8tAQAjq84QS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a tuple containing the following: \"first\", \"middle\", \"last\" and display its contents"
      ],
      "metadata": {
        "id": "-X7pzjVW-5xc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a List containing the following: \"Wile\", \"E\", \"Coyote\" and display its contents"
      ],
      "metadata": {
        "id": "oS9gwb2c-972"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a dictionary that uses the tuple above as keys and the List above as related values and display its contents"
      ],
      "metadata": {
        "id": "SBiFeAzW_BCK"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}